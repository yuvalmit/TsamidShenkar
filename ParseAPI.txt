###########################################################################################################################

--------------------------------------------------------
| signUp (callback, username, password, email, gender) |
--------------------------------------------------------

# Signup function for new users.
# In the call back function you will get true for successful login, false otherwise
# The callback function signature should look like this -> function signupCallback (isSignupSuccessful)

###########################################################################################################################

-------------------------------------------------
| logIn (callback, username, password) |
-------------------------------------------------

# Log in function to parse, this will create a parse user over the current session.
# In the callback function you will get a boolean value,
# true for successful login, false otherwise
# The callback function signature should look like this -> function loginCallback (isLoginSuccessful)

###########################################################################################################################

-------------
| logout () |
-------------

# Logs out the current user.

###########################################################################################################################

-----------------------------
| getCurrentUser (callback) |
-----------------------------

# Returning the current logged in user.
# In the callback function you will recieve user object as defined under /javascript/object/user.js
# The callback function signature should look like this -> function user (currentUser)

###########################################################################################################################

-----------------------------
| getTodayLesson (callback) |
-----------------------------

# Returning toadys lesson (Activity).
# In the callback function you will recieve lesson object as defined under /javascript/object/lesson.js
# The callback function signature should look like this -> function lesson (todayLesson)

###########################################################################################################################

--------------------------------------------
| addAchievementToUser (achievement, user) |
--------------------------------------------

# Adding the new given achievement to the given user.
# The user is an object as defined under /javascript/object/user.js

###########################################################################################################################

-------------------------------------------------
| getUserAvatar (callback, parseAvatar, option) |
-------------------------------------------------

# Getting a user avatar.
# option == 1 will return the head avatar only.
# option == 2 returns the path for the full avatar.
# Default is the head avatar.
# The parseAvater is reacable from each user object by the getAvatar() method.
# In the callback function you will recieve avatar object as defined under /javascript/object/avatar.js
# The callback function signature should look like this -> function avatar (userAvatar)

###########################################################################################################################

--------------------------------------------------------
| createNewLesson (name, date, badge, youtube, google) |
--------------------------------------------------------

# Create new class with the given arguments.
# The date given to this function is formal Date() object.
# The badge given to this function is the badge ID, you can get it from the getAllBadges() function.

###########################################################################################################################

---------------------------------------------
| getAllItems (callback, tableName, option) |
---------------------------------------------

# The callback function will be called with an associative array (id, path) with all items in the given table
# The possible tables are (case sensetive):
# The option is the avatar related parts only, it won't have any effect on the other items such as Badges / Food
# option == 1 will return the head avatar only.
# option == 2 returns the path for the full avatar.
# AvatarExtra, AvatarEyes, AvatarHair, AvatarHeadBody, AvatarMouth, Badges, Food
# The callback function signature should look like this -> function allItems (items)

###########################################################################################################################

---------------------------------
| getAllOnlineUsers (callback)  |
---------------------------------

# Return to the callback function an array of the user object
# In the callback function you will recieve user array objects as defined under /javascript/object/user.js
# The callback function signature should look like this -> function onlineUsers (usersArray)

###########################################################################################################################

------------------------------------------------------------------------
| setUserAvatar (callback, user, head_body, hair, eyes, extra, mouth)  |
------------------------------------------------------------------------

# Set a new avatar for a given user.
# the user the function need is a user object as defined under /javascript/object/user.js
# the function will update that user avatar with the new items
# If the user still has no extra (achievement) you should send null.
# If one of the values is "null" it won't change!
# all the other items should be the ID's which you can get from the "getAllItems" method
# The callback function signature should look like this -> function isUpdate (isUpdateSuccessful)

###########################################################################################################################

-------------------------------------
| getAllUserBadges (callback, user) |
-------------------------------------

# Return to the callback function an associative array (id, path) of all the badges for the given user.

###########################################################################################################################

-------------------------------------------
| getAllUserAchievements (callback, user) |
-------------------------------------------

# Return to the callback function an associative array (id, path) of all the achievements (extras) for the given user.

###########################################################################################################################

-------------------------------------------
| getAllUserFavoriteFood (callback, user) |
-------------------------------------------

# Return to the callback function an associative array (id, path) of all the favorite food for the given user.

###########################################################################################################################

--------------------------------------
| addFavotireFoodToUser (food, user) |
--------------------------------------

# Adding to the given user the new favorite food (you should send the favorite food ID)

###########################################################################################################################

--------------------------------
| addBagdeToUser (badge, user) |
--------------------------------

# Adding to the given user the new badge (you should send the badge ID)

###########################################################################################################################


